rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isValidText(text) {
      return text is string && text.size() <= 1000;
    }

    function isValidTimestamp(timestamp) {
      return timestamp is timestamp;
    }

    function isValidEmail(email) {
      return email.matches('^[^@]+@[^@]+\\.[^@]+$');
    }

    function isValidUrl(url) {
      return url.matches('^https?://[^\\s/$.?#].[^\\s]*$');
    }

    function hasRequiredFields(data, fields) {
      return data.keys().hasAll(fields);
    }

    function isValidNumber(value, min, max) {
      return value is number && value >= min && value <= max;
    }

    // Rate limiting helper
    function isNotRateLimited(path) {
      let recentAttempts = get(/databases/$(database)/documents/system/rate_limits/$(request.auth.uid)/$(path)).data.attempts || 0;
      return recentAttempts < 100;
    }

    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }

    // User profiles
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isOwner(userId) && 
        hasRequiredFields(request.resource.data, ['email', 'displayName', 'createdAt']) &&
        isValidEmail(request.resource.data.email) &&
        isValidText(request.resource.data.displayName) &&
        isValidTimestamp(request.resource.data.createdAt);
      allow update: if isOwner(userId) &&
        (!request.resource.data.diff(resource.data).affectedKeys()
          .hasAny(['email', 'createdAt', 'role'])) &&
        (request.resource.data.displayName == null || 
          isValidText(request.resource.data.displayName));
      allow delete: if isOwner(userId) || isAdmin();

      // User's channels subcollection
      match /channels/{channelId} {
        allow read: if isAuthenticated();
        allow write: if isOwner(userId) && isNotRateLimited('channel_operations');
      }

      // User's settings subcollection
      match /settings/{settingId} {
        allow read: if isOwner(userId);
        allow write: if isOwner(userId) && isNotRateLimited('settings_operations');
      }

      // User's notifications
      match /notifications/{notificationId} {
        allow read: if isOwner(userId);
        allow create: if isAdmin();
        allow update: if isOwner(userId) && 
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']);
        allow delete: if isOwner(userId);
      }
    }

    // Channel data
    match /channels/{channelId} {
      allow read: if true;  // Public read access
      allow create: if isAuthenticated() && 
        hasRequiredFields(request.resource.data, ['title', 'createdAt', 'ownerId']) &&
        isValidText(request.resource.data.title) &&
        isValidTimestamp(request.resource.data.createdAt) &&
        request.resource.data.ownerId == request.auth.uid &&
        isNotRateLimited('channel_creation');
      allow update: if isAuthenticated() && 
        resource.data.ownerId == request.auth.uid &&
        (!request.resource.data.diff(resource.data).affectedKeys()
          .hasAny(['createdAt', 'ownerId'])) &&
        isNotRateLimited('channel_update');
      allow delete: if isAuthenticated() && 
        resource.data.ownerId == request.auth.uid;

      // Channel statistics subcollection
      match /statistics/{statId} {
        allow read: if true;
        allow write: if isAuthenticated() && 
          get(/databases/$(database)/documents/channels/$(channelId)).data.ownerId == request.auth.uid &&
          isNotRateLimited('statistics_update');
      }

      // Channel members subcollection
      match /members/{memberId} {
        allow read: if true;
        allow write: if isAuthenticated() &&
          (resource.data.ownerId == request.auth.uid ||
           request.auth.uid == memberId);
      }
    }

    // Comments
    match /comments/{commentId} {
      allow read: if true;
      allow create: if isAuthenticated() && 
        hasRequiredFields(request.resource.data, ['text', 'userId', 'createdAt']) &&
        isValidText(request.resource.data.text) &&
        request.resource.data.userId == request.auth.uid &&
        isValidTimestamp(request.resource.data.createdAt) &&
        isNotRateLimited('comment_creation');
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid &&
        request.resource.data.userId == request.auth.uid &&
        (!request.resource.data.diff(resource.data).affectedKeys()
          .hasAny(['userId', 'createdAt'])) &&
        isValidText(request.resource.data.text);
      allow delete: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isAdmin());
    }

    // Analytics
    match /analytics/{docId} {
      allow read: if isAuthenticated();
      allow write: if false;  // Write only through backend
    }

    // System settings and rate limits
    match /system/{docId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();

      match /rate_limits/{userId}/{operation} {
        allow read: if isOwner(userId) || isAdmin();
        allow write: if isAdmin();
      }
    }

    // Audit logs
    match /audit_logs/{logId} {
      allow read: if isAdmin();
      allow write: if false;  // Write only through backend
    }
  }
} 